// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/@prisma-client-mysql"
}

datasource db {
  provider = "mysql"
  url = env("MYSQL_DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id String @id @default(uuid())
  name String @unique
  
  userId String
  menus      Menu[] @relation("StoreToMenu")
  billboards Billboard[] @relation("StoreToBillboard")
  order Order[] @relation("StoreToOrder")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  storedId String
  store Store @relation("StoreToBillboard", fields: [storedId], references: [id])
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storedId])
}

model Chef {
  id                Int         @id @default(autoincrement())
  userId            Int         // Link to the User ID in the authentication service
  menus             Menu[] @relation("ChefToMenu")
  schedules         ChefSchedule[] @relation("ChefToChefSchedule")
  // ... other fields specific to the chef ...
}

model Menu {
  id                Int         @id @default(autoincrement())
  chefId            Int
  chef              Chef        @relation("ChefToMenu",fields: [chefId], references: [id])
  orderItems      OrderItem[]   @relation("MenuToOrderItem")
  title             String
  description       String?
  price             Float
  availableDates    ChefSchedule[] @relation("MenuToChefSchedule")
  storeId    String
  store      Store    @relation("StoreToMenu",fields: [storeId], references: [id])

  @@index([storeId])
  @@index([chefId])
  // ... other fields ...
}

model ChefSchedule {
  id                Int         @id @default(autoincrement())
  menuId            Int
  chefId            Int
  chef              Chef        @relation("ChefToChefSchedule",fields: [chefId], references: [id])
  menu              Menu        @relation("MenuToChefSchedule",fields: [menuId], references: [id])
  date              DateTime    
  @@index([chefId])
  @@index([menuId])
}

model Order {
  id                Int         @id @default(autoincrement())
  customerId        Int         // Link to the User ID in the authentication service
  orderItems        OrderItem[] @relation("OrderToOrderItem")
  status            OrderStatus
  orderDate         DateTime    @default(now())
  pickupDate        DateTime?   // When the customer plans to pick up the order
  storeId    String?
  store      Store?    @relation("StoreToOrder",fields: [storeId], references: [id])
  @@index([storeId])
  // ... other fields ...
}

model OrderItem {
  id                Int         @id @default(autoincrement())
  orderId           Int
  order             Order       @relation("OrderToOrderItem",fields: [orderId], references: [id])
  menuId            Int
  menu              Menu        @relation("MenuToOrderItem",fields: [menuId], references: [id])
  quantity          Int

  @@index([orderId])
  @@index([menuId])
  
  // ... other fields ...
}

enum OrderStatus {
  PLACED
  PAID
  CANCELLED
  COMPLETED
}