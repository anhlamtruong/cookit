// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma-client-mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_DATABASE_URL")
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  email             String?      @unique
  username          String?      @unique
  image             String?
  name              String?     
  rolesIds          String[]    @db.ObjectId
  roles             Role[]      @relation(fields: [rolesIds], references: [id])
  profileId         String?     @db.ObjectId
  profile           Profile?    
  status            UserStatus?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLogin         DateTime?
  emailVerified     DateTime?
  hashedPassword    String?
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  accounts Account[]
  message Message[]
  storeIds String[]
  // Other fields relevant to your application
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  expires_in Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider,providerAccountId])
}

model Conversation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])

}

model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createAt DateTime @default(now())
  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Profile {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @unique @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  phoneNumber       String?
  address           String?
  image String?
  imageUrl          String?
  // Additional profile information
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  EMAIL_VERIFIED
  // Other statuses as needed
}

model Role {
  id                String     @id @default(auto())  @map("_id") @db.ObjectId
  name              String     @unique
  userIds           String[]   @db.ObjectId
  users             User[]     @relation(fields: [userIds], references: [id])
  permissionsIds    String[]   @db.ObjectId
  permissions       Permission[] @relation(fields: [permissionsIds], references: [id])
}

model Permission {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId 
  name              String     @unique
  rolesIds          String[]   @db.ObjectId
  roles             Role[]     @relation(fields: [rolesIds], references: [id])
}

